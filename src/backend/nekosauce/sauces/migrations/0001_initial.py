# Generated by Django 4.2.5 on 2023-10-04 18:16

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
from django.db import migrations, models
import nekosauce.sauces.utils.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.RunSQL(
            "CREATE EXTENSION IF NOT EXISTS pg_similarity;",
            reverse_sql="DROP EXTENSION IF EXISTS pg_similarity;",
        ),
        migrations.CreateModel(
            name="Sauce",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "site_urls",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.URLField(max_length=255), size=None
                    ),
                ),
                (
                    "api_urls",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.URLField(max_length=255), size=None
                    ),
                ),
                (
                    "file_urls",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.URLField(max_length=255), size=None
                    ),
                ),
                (
                    "source_id",
                    models.SmallIntegerField(
                        choices=[
                            (1, "Danbooru"),
                            (2, "Gelbooru"),
                            (3, "Konachan"),
                            (4, "AIBooru"),
                            (5, "Anime Pictures"),
                            (6, "All The Fallen Booru"),
                            (7, "Lolibooru"),
                            (8, "Pixiv"),
                            (9, "Rule 34"),
                            (10, "Yande.re"),
                            (11, "Zerochan"),
                        ],
                        verbose_name="Source",
                    ),
                ),
                ("source_site_id", models.CharField(max_length=255)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=255),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Illustration"),
                            (2, "Illustration (Animated)"),
                            (3, "Manga"),
                            (4, "Doujinshi"),
                            (5, "Anime"),
                            (6, "Visual Novel"),
                            (7, "Light Novel"),
                            (8, "Other"),
                        ],
                        default=1,
                    ),
                ),
                ("is_nsfw", models.BooleanField(default=False, null=True)),
                (
                    "hash",
                    nekosauce.sauces.utils.fields.BitField(max_length=256, null=True),
                ),
                ("sha512", models.BinaryField(editable=True, null=True)),
                ("height", models.PositiveIntegerField()),
                ("width", models.PositiveIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "indexes": [
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False)),
                        name="sauces__hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 1)),
                        name="sauces__1_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 2)),
                        name="sauces__2_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 3)),
                        name="sauces__3_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 4)),
                        name="sauces__4_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 5)),
                        name="sauces__5_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 6)),
                        name="sauces__6_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 7)),
                        name="sauces__7_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 8)),
                        name="sauces__8_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 9)),
                        name="sauces__9_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 10)),
                        name="sauces__10_hashes__idx",
                    ),
                    django.contrib.postgres.indexes.BTreeIndex(
                        models.F("hash"),
                        condition=models.Q(("hash__isnull", False), ("source_id", 11)),
                        name="sauces__11_hashes__idx",
                    ),
                ],
                "unique_together": {("source_id", "source_site_id")},
            },
        ),
    ]
